--DWH

-- C##db_UNAH => todas las tablas
-- C##DWH => Solo las 12 tablas

--select any table
select * from C##db_UNAH.tbl_personas;
select * from c##hr.employees;


select * from TBL_TITULARIDAD; --DESTINO
select * from C##DB_UNAH.TBL_TITULARIDAD; --ORIGEN

INSERT INTO TBL_TITULARIDAD (
    CODIGO_TITULARIDAD,
    NOMBRE_TITULARIDAD,
    SALARIO_MINIMO,
    SALARIO_MAXIMO
) 
SELECT 
    CODIGO_TITULARIDAD,
    NOMBRE_TITULARIDAD,
    SALARIO_MINIMO,
    SALARIO_MAXIMO
FROM C##DB_UNAH.TBL_TITULARIDAD;


SELECT * FROM TBL_ALUMNOS;


-- ETL DE ALUMNOS
CREATE OR REPLACE PROCEDURE P_ETL_VOLATIL_ALUMNOS AS
    V_FECHA_HORA_INICIO DATE := SYSDATE;
BEGIN

    DELETE FROM TBL_ALUMNOS;
    ---INSERT ALUMNOS
    INSERT INTO TBL_ALUMNOS (
        CODIGO_ALUMNO,
        GENERO, --
        CODIGO_LUGAR_NACIMIENTO,
        CODIGO_LUGAR_RESIDENCIA,
        CODIGO_CAMPUS,
        TIPO_IDENTIFICACION,
        ESTADO_CIVIL,
        NOMBRE,
        APELLIDO,
        FECHA_NACIMIENTO,
        IDENTIDAD,
        DIRECCION,
        TELEFONO,
        CORREO_ELECTRONICO,
        NUMERO_CUENTA,
        PROMEDIO
    ) 
    SELECT  A.CODIGO_ALUMNO,
            C.NOMBRE_GENERO,
            B.CODIGO_LUGAR_NACIMIENTO,
            B.CODIGO_LUGAR_RESIDENCIA,
            B.CODIGO_CAMPUS,
            D.TIPO_IDENTIFICACION,
            E.NOMBRE_ESTADO_CIVIL,
            B.NOMBRE,
            B.APELLIDO,
            B.FECHA_NACIMIENTO,
            B.IDENTIDAD,
            B.DIRECCION,
            B.TELEFONO,
            B.CORREO_ELECTRONICO,
            A.NUMERO_CUENTA,
            A.PROMEDIO
    FROM C##DB_UNAH.TBL_ALUMNOS A
    INNER JOIN C##DB_UNAH.TBL_PERSONAS B
    ON (A.CODIGO_ALUMNO = B.CODIGO_PERSONA)
    INNER JOIN C##DB_UNAH.TBL_GENEROS C
    ON (B.CODIGO_GENERO = C.CODIGO_GENERO)
    INNER JOIN C##DB_UNAH.TBL_TIPO_IDENTIFICACION D
    ON (B.CODIGO_TIPO_IDENTIFICACION = D.CODIGO_TIPO_IDENTIFICACION)
    INNER JOIN C##DB_UNAH.TBL_ESTADOS_CIVILES E
    ON (B.CODIGO_ESTADO_CIVIL = E.CODIGO_ESTADO_CIVIL);

    P_LOG (
        P_FECHA_HORA_INICIO => V_FECHA_HORA_INICIO, 
        P_PROCESO => $$PLSQL_UNIT, 
        P_MENSAJE => 'EXTRACCIÓN EXITOSA', 
        P_ESTATUS => 'EXITOSO', 
        P_REGISTROS_PROCESADOS => SQL%ROWCOUNT
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        P_LOG (
            P_FECHA_HORA_INICIO => V_FECHA_HORA_INICIO, 
            P_PROCESO => $$PLSQL_UNIT,
            P_MENSAJE => 'EXTRACCIÓN FALLIDA' || SQLERRM,
            P_ESTATUS => 'FALLIDO',
            P_REGISTROS_PROCESADOS => SQL%ROWCOUNT
        );
END;


CREATE OR REPLACE PROCEDURE P_ETL_ALUMNOS AS
    V_FECHA_HORA_INICIO DATE := SYSDATE;
BEGIN
    ---INSERT ALUMNOS
    MERGE INTO TBL_ALUMNOS D
    USING (
        SELECT  A.CODIGO_ALUMNO,
                C.NOMBRE_GENERO,
                B.CODIGO_LUGAR_NACIMIENTO,
                B.CODIGO_LUGAR_RESIDENCIA,
                B.CODIGO_CAMPUS,
                D.TIPO_IDENTIFICACION,
                E.NOMBRE_ESTADO_CIVIL,
                B.NOMBRE,
                B.APELLIDO,
                B.FECHA_NACIMIENTO,
                B.IDENTIDAD,
                B.DIRECCION,
                B.TELEFONO,
                B.CORREO_ELECTRONICO,
                A.NUMERO_CUENTA,
                A.PROMEDIO
        FROM C##DB_UNAH.TBL_ALUMNOS A
        INNER JOIN C##DB_UNAH.TBL_PERSONAS B
        ON (A.CODIGO_ALUMNO = B.CODIGO_PERSONA)
        INNER JOIN C##DB_UNAH.TBL_GENEROS C
        ON (B.CODIGO_GENERO = C.CODIGO_GENERO)
        INNER JOIN C##DB_UNAH.TBL_TIPO_IDENTIFICACION D
        ON (B.CODIGO_TIPO_IDENTIFICACION = D.CODIGO_TIPO_IDENTIFICACION)
        INNER JOIN C##DB_UNAH.TBL_ESTADOS_CIVILES E
        ON (B.CODIGO_ESTADO_CIVIL = E.CODIGO_ESTADO_CIVIL)
    ) O
    ON (D.CODIGO_ALUMNO = O.CODIGO_ALUMNO)
    WHEN MATCHED THEN
        UPDATE SET 
            D.GENERO = O.NOMBRE_GENERO,
            D.CODIGO_LUGAR_NACIMIENTO = O.CODIGO_LUGAR_NACIMIENTO,
            D.CODIGO_LUGAR_RESIDENCIA = O.CODIGO_LUGAR_RESIDENCIA,
            D.CODIGO_CAMPUS = O.CODIGO_CAMPUS,
            D.TIPO_IDENTIFICACION = O.TIPO_IDENTIFICACION,
            D.ESTADO_CIVIL = O.NOMBRE_ESTADO_CIVIL,
            D.NOMBRE = O.NOMBRE,
            D.APELLIDO = O.APELLIDO,
            D.FECHA_NACIMIENTO = O.FECHA_NACIMIENTO,
            D.IDENTIDAD = O.IDENTIDAD,
            D.DIRECCION = O.DIRECCION,
            D.TELEFONO = O.TELEFONO,
            D.CORREO_ELECTRONICO = O.CORREO_ELECTRONICO,
            D.NUMERO_CUENTA = O.NUMERO_CUENTA,
            D.PROMEDIO = O.PROMEDIO
    WHEN NOT MATCHED THEN
        INSERT (
            CODIGO_ALUMNO,
            GENERO,
            CODIGO_LUGAR_NACIMIENTO,
            CODIGO_LUGAR_RESIDENCIA,
            CODIGO_CAMPUS,
            TIPO_IDENTIFICACION,
            ESTADO_CIVIL,
            NOMBRE,
            APELLIDO,
            FECHA_NACIMIENTO,
            IDENTIDAD,
            DIRECCION,
            TELEFONO,
            CORREO_ELECTRONICO,
            NUMERO_CUENTA,
            PROMEDIO
        ) VALUES (
            O.CODIGO_ALUMNO,
            O.NOMBRE_GENERO,
            O.CODIGO_LUGAR_NACIMIENTO,
            O.CODIGO_LUGAR_RESIDENCIA,
            O.CODIGO_CAMPUS,
            O.TIPO_IDENTIFICACION,
            O.NOMBRE_ESTADO_CIVIL,
            O.NOMBRE,
            O.APELLIDO,
            O.FECHA_NACIMIENTO,
            O.IDENTIDAD,
            O.DIRECCION,
            O.TELEFONO,
            O.CORREO_ELECTRONICO,
            O.NUMERO_CUENTA,
            O.PROMEDIO
        );



    P_LOG (
        P_FECHA_HORA_INICIO => V_FECHA_HORA_INICIO, 
        P_PROCESO => $$PLSQL_UNIT, 
        P_MENSAJE => 'EXTRACCIÓN EXITOSA', 
        P_ESTATUS => 'EXITOSO', 
        P_REGISTROS_PROCESADOS => SQL%ROWCOUNT
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        P_LOG (
            P_FECHA_HORA_INICIO => V_FECHA_HORA_INICIO, 
            P_PROCESO => $$PLSQL_UNIT,
            P_MENSAJE => 'EXTRACCIÓN FALLIDA' || SQLERRM,
            P_ESTATUS => 'FALLIDO',
            P_REGISTROS_PROCESADOS => SQL%ROWCOUNT
        );
END;

BEGIN
    P_ETL_ALUMNOS;
END;


SELECT * FROM TBL_ALUMNOS;

SELECT  TO_CHAR(FECHA_HORA_INICIO, 'DD-MM-YYYY HH24:MI:SS') FECHA_HORA_INICIO,
        TO_CHAR(FECHA_HORA_FIN, 'DD-MM-YYYY HH24:MI:SS') FECHA_HORA_FIN,
        PROCESO, MENSAJE, ESTATUS,REGISTROS_PROCESADOS
FROM TBL_LOG_ETL
ORDER BY FECHA_HORA_INICIO DESC;

---UPSERT
MERGE INTO TABLA_DESTINO 
USING TABLA_ORIGEN_O_CONSULTA_ORIGEN
ON (CONDICION_DE_UNION) --CAMPO QUE HACE MATCH EL ORIGEN CON EL DESTINO (USUALMENTE LA LLAVE PRIMARIA)
WHEN MATCHED THEN --CUANDO HACE MATCH SIGNIFICA QUE YA EXISTE ASI QUE ACTUALIZAMOS 
    UPDATE SET CAMPO1 = VALOR1, CAMPO2 = VALOR2
WHEN NOT MATCHED THEN --CUANDO NO HACE MATCH SIGNIFICA QUE NO EXISTE ENTONCES INSERTAMOS
    INSERT (CAMPO1, CAMPO2) VALUES (VALOR1, VALOR2);












--INSERTAR LUGARES
INSERT INTO TBL_LUGARES
(
    CODIGO_LUGAR,
    NOMBRE_LUGAR,
    LONGITUD,
    LATITUD,
    TIPO_LUGAR,
    CODIGO_LUGAR_PADRE
) 
SELECT CODIGO_LUGAR,
    NOMBRE_LUGAR,
    LONGITUD,
    LATITUD,
    B.NOMBRE_TIPO_LUGAR,
    CODIGO_LUGAR_PADRE 
FROM C##DB_UNAH.TBL_LUGARES A
INNER JOIN C##DB_UNAH.TBL_TIPO_LUGARES B
ON (A.CODIGO_TIPO_LUGAR = B.CODIGO_TIPO_LUGAR);


SELECT * FROM TBL_CAMPUS;
SELECT * FROM C##DB_UNAH.TBL_CAMPUS;


--ETL UTILIZANDO UN MERGE
CREATE OR REPLACE PROCEDURE P_ETL_CAMPUS AS
    V_FECHA_HORA_INICIO DATE := SYSDATE;
BEGIN

    --MERGE CAMPUS
    MERGE INTO TBL_CAMPUS T
    USING C##DB_UNAH.TBL_CAMPUS S
    ON (T.CODIGO_CAMPUS = S.CODIGO_CAMPUS)
    WHEN MATCHED THEN --EXISTEN
        UPDATE SET T.NOMBRE_CAMPUS = S.NOMBRE_CAMPUS
    WHEN NOT MATCHED THEN
        INSERT (CODIGO_CAMPUS, NOMBRE_CAMPUS)
        VALUES (S.CODIGO_CAMPUS, S.NOMBRE_CAMPUS);

    DBMS_OUTPUT.PUT_LINE('REGISTROS PROCESADOS: ' || SQL%ROWCOUNT);

    --SIGNIFICA QUE TODO SALIO BIEN, ENTONCES INSERTAMOS EN EL LOG
    P_LOG (
        P_FECHA_HORA_INICIO => V_FECHA_HORA_INICIO, 
        P_PROCESO => $$PLSQL_UNIT, 
        P_MENSAJE => 'EXTRACCIÓN EXITOSO', 
        P_ESTATUS => 'EXITOSO', 
        P_REGISTROS_PROCESADOS => SQL%ROWCOUNT
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        P_LOG (
            P_FECHA_HORA_INICIO => V_FECHA_HORA_INICIO, 
            P_PROCESO => $$PLSQL_UNIT, 
            P_MENSAJE => 'EXTRACCIÓN FALLIDA' || SQLERRM, 
            P_ESTATUS => 'FALLIDO', 
            P_REGISTROS_PROCESADOS => SQL%ROWCOUNT
        );
END;

-- GUARDAR LOG O BITACORA DE LOS PROCESOS
DROP TABLE TBL_LOG_ETL;
CREATE TABLE TBL_LOG_ETL (
    CODIGO_LOG NUMBER PRIMARY KEY,
    FECHA_HORA_INICIO DATE,
    FECHA_HORA_FIN DATE,
    PROCESO VARCHAR2(100),
    MENSAJE VARCHAR2(4000),
    ESTATUS VARCHAR2(10),
    REGISTROS_PROCESADOS NUMBER
);

CREATE SEQUENCE SEQ_LOG_ETL;
CREATE OR REPLACE PROCEDURE P_LOG (
    P_FECHA_HORA_INICIO DATE,
    P_PROCESO VARCHAR2,
    P_MENSAJE VARCHAR2,
    P_ESTATUS VARCHAR2,
    P_REGISTROS_PROCESADOS NUMBER
) AS
BEGIN
    INSERT INTO TBL_LOG_ETL (
            CODIGO_LOG,
            FECHA_HORA_INICIO,
            FECHA_HORA_FIN,
            PROCESO,
            MENSAJE,
            ESTATUS,
            REGISTROS_PROCESADOS
        ) VALUES (
            SEQ_LOG_ETL.NEXTVAL,
            P_FECHA_HORA_INICIO,
            SYSDATE,
            P_PROCESO,
            P_MENSAJE,
            P_ESTATUS,
            P_REGISTROS_PROCESADOS
        );
        COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL GUARDAR EN EL LOG: ' || SQLERRM);
END;


--ETL VOLATIL BORRANDO TODA LA INFORMACI'ON Y CARGARLA NUEVAMENTE
CREATE OR REPLACE PROCEDURE P_ETL_VOLATIL_CAMPUS AS
BEGIN

    --DELETE
    DELETE FROM TBL_CAMPUS;
    
    --INSERTAR CAMPUS
    INSERT INTO TBL_CAMPUS (
        CODIGO_CAMPUS,
        NOMBRE_CAMPUS
    ) 
    SELECT 
        CODIGO_CAMPUS,
        NOMBRE_CAMPUS
    FROM C##DB_UNAH.TBL_CAMPUS;
    DBMS_OUTPUT.PUT_LINE('REGISTROS PROCESADOS: ' || SQL%ROWCOUNT);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


BEGIN
    P_ETL_CAMPUS;
END;


SELECT * FROM TBL_LOG_ETL;

COMMIT;


--DESABILITAR LLAVES FORANEAS
ALTER TABLE TBL_ALUMNOS DISABLE CONSTRAINT TBL_ALUMNOS_TBL_CAMPUS_FK;
ALTER TABLE TBL_ALUMNOS DISABLE CONSTRAINT TBL_ALUMNOS_TBL_LUGARES_FK;
ALTER TABLE TBL_ALUMNOS DISABLE CONSTRAINT TBL_ALUMNOS_TBL_LUGARES_FKV1;





CREATE TABLE TBL_VENTAS (
    CODIGO_VENTA NUMBER PRIMARY KEY,
    CODIGO_CLIENTE NUMBER,
    CODIGO_PRODUCTO NUMBER,
    FECHA_VENTA DATE,
    CANTIDAD NUMBER,
    PRECIO NUMBER,
    TOTAL NUMBER
);





---EXTRACCION DE VENTAS INCREMENTAL
-- NOTA: USUALMENTE EN UN DWH SE EXTRAE LA INFOMACION DEL DIA ANTERIOR HACIA ATRAS,
        -- ES DECIR NO SE EXTRAE LA INFORMACION DEL DIA ACTUAL
-- CASO 1: NO HAY NADA DE INFORMACION EN LA TABLA DE DESTINO
-- CASO 2: YA HAY INFORMACION EN LA TABLA DE DESTINO

CREATE OR REPLACE PROCEDURE P_ETL_VENTAS AS
    --DEFINIR EL RANGO DE FECHAS A EXTRAER
    V_FECHA_INICIO DATE;
    V_FECHA_FIN DATE := SYSDATE - 1;
BEGIN
    --OBTENER LA FECHA MAS RECIENTE DE LA TABLA DE DESTINO
    SELECT MAX(FECHA_VENTA) + 1
    INTO V_FECHA_INICIO
    FROM TBL_VENTAS;

    --SI NO HAY INFORMACION EN LA TABLA DE DESTINO (ES DECIR V_FECHA_INICIO ES NULL), 
    -- EXTRAER TOOOODA LA INFORMACION DEL ORIGEN (MENOS EL DIA ACTUAL)
    IF (V_FECHA_INICIO IS NULL) THEN
        SELECT MIN(FECHA_VENTA)
        INTO V_FECHA_INICIO
        FROM C##DB_UNAH.TBL_VENTAS;
    END IF;

    IF V_FECHA_INICIO IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('NO HAY INFORMACION EN LA TABLA DE ORIGEN');
        RETURN;
    END IF;

    WHILE V_FECHA_INICIO <= V_FECHA_FIN LOOP
        INSERT INTO TBL_VENTAS (
            CODIGO_VENTA,
            CODIGO_CLIENTE,
            CODIGO_PRODUCTO,
            FECHA_VENTA,
            CANTIDAD,
            PRECIO,
            TOTAL
        ) 
        SELECT 
            CODIGO_VENTA,
            CODIGO_CLIENTE,
            CODIGO_PRODUCTO,
            FECHA_VENTA,
            CANTIDAD,
            PRECIO,
            TOTAL
        FROM C##DB_UNAH.TBL_VENTAS
        WHERE TRUNC(FECHA_VENTA) = TRUNC(V_FECHA_INICIO);

        V_FECHA_INICIO := V_FECHA_INICIO + 1;
    END LOOP;
    COMMIT;
END;


SELECT MAX(FECHA_VENTA)
FROM TBL_VENTAS;


BEGIN
    P_ETL_VENTAS;
END;


SELECT NULL + 1 FROM DUAL;
TRUNCATE TABLE TBL_VENTAS;

SELECT COUNT(*) --7100 
FROM TBL_VENTAS;


DELETE--7300 
FROM TBL_VENTAS
WHERE FECHA_VENTA BETWEEN TRUNC(SYSDATE-10) AND TRUNC(SYSDATE);

SELECT COUNT(*) -- 7320
FROM C##DB_UNAH.TBL_VENTAS;

SELECT *
FROM C##DB_UNAH.TBL_VENTAS
WHERE TRUNC(FECHA_VENTA) = TRUNC(SYSDATE);


SELECT TO_CHAR(TRUNC(SYSDATE), 'dd-mm-yyyy HH24:mi:ss') FROM DUAL;

SELECT TO_CHAR(FECHA_VENTA, 'dd-mm-yyyy HH24:mi:ss') FROM TBL_VENTAS;
